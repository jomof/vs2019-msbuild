<!--

  This file contains Visual Studio and designer-related properties and items for managed projects.

-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- Turn off capabilities from Microsoft.Common.CurrentVersions.targets and explicitly include the ones we want. The list below
       currently matches what is in common targets, but removes BuildWindowsDesktopTarget -->
    <DefineCommonItemSchemas>false</DefineCommonItemSchemas>
    <DefineCommonCapabilities>false</DefineCommonCapabilities>
    <DefineCommonReferenceSchemas>false</DefineCommonReferenceSchemas>

    <DefineCommonManagedCapabilities Condition=" '$(DefineCommonManagedCapabilities)' == '' ">true</DefineCommonManagedCapabilities>
    <DefineCommonManagedItemSchemas Condition=" '$(DefineCommonManagedItemSchemas)' == '' ">true</DefineCommonManagedItemSchemas>
    <DefineCommonManagedReferenceSchemas Condition=" '$(DefineCommonManagedReferenceSchemas)' == '' ">true</DefineCommonManagedReferenceSchemas>

    <!--This property sets the default output types supported by the project system.-->
    <SupportedOutputTypes Condition="'$(SupportedOutputTypes)' == ''">Exe;WinExe;Library</SupportedOutputTypes>

    <SuppressOutOfDateMessageOnBuild Condition="'$(SuppressOutOfDateMessageOnBuild)' == ''">true</SuppressOutOfDateMessageOnBuild>
  </PropertyGroup>


  <!--
    Rule files that don't need localization go in the neutral directory to save duplicating files into each language
  -->
  <PropertyGroup Condition="'$(ManagedXamlNeutralResourcesDirectory)' == ''">
    <ManagedXamlNeutralResourcesDirectory>$(MSBuildThisFileDirectory)</ManagedXamlNeutralResourcesDirectory>
  </PropertyGroup>

  <!--
    Locate the approriate localized xaml resources based on the language ID or name.

    The logic here matches the resource manager sufficiently to handle the fixed set of 
    possible VS languages and directories on disk.

    We cannot respect the exact probe order of the resource manager as this has to evaluate statically
    and we have only LangName and LangID and no access to System.Globalization API.
  -->
  <PropertyGroup Condition="'$(ManagedXamlResourcesDirectory)' == ''">
    <!-- 1. Probe for exact match against LangName. (e.g. pt-BR) -->
    <ManagedXamlResourcesDirectory>$(MSBuildThisFileDirectory)$(LangName)</ManagedXamlResourcesDirectory>

    <!-- 2. Handle special cases of languages which would not match above or below. -->
    <ManagedXamlResourcesDirectory Condition="!Exists('$(ManagedXamlResourcesDirectory)') and '$(LangID)' == '2052'">$(MSBuildThisFileDirectory)zh-Hans</ManagedXamlResourcesDirectory>
    <ManagedXamlResourcesDirectory Condition="!Exists('$(ManagedXamlResourcesDirectory)') and '$(LangID)' == '1028'">$(MSBuildThisFileDirectory)zh-Hant</ManagedXamlResourcesDirectory>

    <!-- 3. Probe for parent by taking portion the portion before the hyphen (e.g. fr-FR -> fr) -->
    <ManagedXamlResourcesDirectory Condition="!Exists('$(ManagedXamlResourcesDirectory)')">$(MSBuildThisFileDirectory)$(LangName.Split('-')[0])</ManagedXamlResourcesDirectory>

    <!-- 4. Fall back to neutral resources if all of the above fail -->
    <ManagedXamlResourcesDirectory Condition="!Exists('$(ManagedXamlResourcesDirectory)')">$(ManagedXamlNeutralResourcesDirectory)</ManagedXamlResourcesDirectory>
  </PropertyGroup>

  <PropertyGroup>
    <ManagedXamlResourcesDirectory Condition="!HasTrailingSlash('$(ManagedXamlResourcesDirectory)')">$(ManagedXamlResourcesDirectory)\</ManagedXamlResourcesDirectory>
    <DebuggerFlavor Condition = "'$(DebuggerFlavor)' == ''">ProjectDebugger</DebuggerFlavor>
  </PropertyGroup>

  <!-- Project Capabilities -->

  <!-- Capabilities shared between shared projects & binary-producing projects.  -->
  <ItemGroup>
    <ProjectCapability Include=".NET" />
  </ItemGroup>

  <!-- Capabilities for binary producing projects -->

  <ItemGroup Condition="'$(DefineCommonManagedCapabilities)' == 'true'">
    <ProjectCapability Include="UseFileGlobs"/>
    <ProjectCapability Include="DynamicDependentFile"/>

    <!-- DependenciesTree capability lights up a Dependencies tree node and it's sub node providers-->
    <ProjectCapability Include="DependenciesTree" />
    <ProjectCapability Include="LaunchProfiles" />
    <ProjectCapability Include="NoGeneralDependentFileIcon"/>
    <!--
      List of capabilities below is adding back common capabilities defined in imported targets.
      We disabled them with the property DefineCommonCapabilities=false to get rid of default
      References capability, but everything else we want back.
    -->
    <ProjectCapability Include="
                          AssemblyReferences;
                          COMReferences;
                          ProjectReferences;
                          PackageReferences;
                          SharedProjectReferences;
                          WinRTReferences;
                          OutputGroups;
                          AllTargetOutputGroups;
                          VisualStudioWellKnownOutputGroups;
                          SingleFileGenerators;
                          DeclaredSourceItems;
                          UserSourceItems;
                          SupportAvailableItemName;
                          PersistDesignTimeDataOutOfProject;" />

    <!-- Reference Manager capabilities -->
    <ProjectCapability Include="ReferenceManagerAssemblies" />
    <ProjectCapability Include="ReferenceManagerBrowse" />
    <ProjectCapability Include="ReferenceManagerCOM" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' Or ('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(_TargetFrameworkVersionWithoutV)' >= '3.0')"/>
    <ProjectCapability Include="ReferenceManagerProjects" />
    <ProjectCapability Include="ReferenceManagerSharedProjects" />
    <ProjectCapability Include="ReferenceManagerWinRT" />

    <!-- Settings page capability -->
    <ProjectCapability Include="AppSettings" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'"/>

    <!-- Publish capability enables the Publish command for the Project -->
    <ProjectCapability Include="Publish"/>
    <ProjectCapability Include="FolderPublish"/>

    <!-- All Microsoft.NET.Sdk Exe projects, except WPF and WinForms exes, can be published to app service -->
    <ProjectCapability Include="AppServicePublish" Condition="'$(OutputType)' == 'Exe'" />

    <!-- Capabilities for WPF and WinForms -->
    <ProjectCapability Include="WPF" Condition="'$(UseWPF)' == 'true'" />
    <ProjectCapability Include="WindowsForms" Condition="'$(UseWindowsForms)' == 'true'" />
    <ProjectCapability Include="DataSourceWindow" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' Or ('$(TargetFrameworkIdentifier)' == '.NETCoreApp' And '$(_TargetFrameworkVersionWithoutV)' >= '3.0')"/>
  </ItemGroup>

  <!-- Common Project System rules that override rules defined in msbuild. These are exact copy of the rules defined in msbuild. -->
  <ItemGroup Condition="'$(DefineCommonManagedItemSchemas)' == 'true'">

    <!-- Files/Folders schema -->
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ProjectItemsSchema.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <!-- Files/Folders -->
    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)AdditionalFiles.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)AdditionalFiles.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)ApplicationDefinition.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ApplicationDefinition.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)Compile.xaml;">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)Compile.BrowseObject.xaml;">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)Content.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)Content.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)EmbeddedResource.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)EmbeddedResource.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)Folder.xaml">
      <Context>File;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)None.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)None.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)Page.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)Page.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)SpecialFolder.xaml">
      <Context>File;ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)XamlAppDef.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)XamlAppDef.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)Resource.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)Resource.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <!-- Project related settings -->
    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)AppDesigner.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)CompilerCommandLineArgs.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)LanguageService.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <!-- NuGet Restore Properties -->
    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)NuGetRestore.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <!-- Up-to-date check -->
    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)ResolvedCompilationReference.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)CopyUpToDateMarker.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)UpToDateCheckInput.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)UpToDateCheckOutput.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)UpToDateCheckBuilt.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ConfigurationGeneral.xaml">
      <Context>Project;ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)DebuggerGeneral.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)GeneralBrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)GeneralConfiguredBrowseObject.xaml">
      <Context>ConfiguredBrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ProjectDebugger.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)SourceControl.xaml">
      <Context>Invisible</Context>
    </PropertyPageSchema>

    <!-- .editorconfig files -->
    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)PotentialEditorConfigFiles.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>
  </ItemGroup>

  <ItemGroup Condition="'$(DefineCommonManagedReferenceSchemas)' == 'true'">
    <!-- Assembly references -->
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)AssemblyReference.xaml">
      <Context>Project;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ResolvedAssemblyReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <!-- COM references -->
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)COMReference.xaml">
      <Context>Project;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ResolvedCOMReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <!-- Framework references -->
    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)CollectedFrameworkReference.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>

    <!-- Package downloads -->
    <PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)CollectedPackageDownload.xaml">
      <Context>ProjectSubscriptionService</Context>
    </PropertyPageSchema>
    
    <!-- Project references -->
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ProjectReference.xaml">
      <Context>Project;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ResolvedProjectReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <!-- Sdk references -->
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)SdkReference.xaml">
      <Context>Project;ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ResolvedSdkReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <!-- Package references -->
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)PackageReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ResolvedPackageReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <!-- Tool references -->
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)DotNetCliToolReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <!-- Analyzer references -->
    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)AnalyzerReference.xaml">
      <Context>Project;ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)ResolvedAnalyzerReference.xaml">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>
  </ItemGroup>

  <!-- List of external files that trigger design-time builds when they are modified -->
  <ItemGroup>
    <AdditionalDesignTimeBuildInput Include="$(ProjectAssetsFile)" />   <!-- NuGet assets file -->
  </ItemGroup>

  <!--
    EmbeddedFiles are source files to be embedded to the PDB. 
    We need to set Visible to false in order to not display duplicate entries in project UI.
  -->
  <ItemDefinitionGroup>
    <EmbeddedFiles>
      <Visible>false</Visible>
    </EmbeddedFiles>
  </ItemDefinitionGroup>

  <!-- Targets -->

  <!-- For a newly created project with no packages restored, Design time build complains that there is no ResolvePackageDependenciesDesignTime
       target, that is available only after restoring the .Net Core SDK targets. This No-op target will satisfy the check and will get overriden
       once the actual targets are available after package restore-->
  <Target Name="ResolvePackageDependenciesDesignTime" />
  <Target Name="CollectSDKReferencesDesignTime" />
  <Target Name="CollectResolvedSDKReferencesDesignTime" />

  <!-- This target is used to collect the PackageReferences in the project. This target can be overriden to add\remove packagereferences before they are
       sent to NuGet to be restored.-->
  <Target Name="CollectPackageReferences" Returns="@(PackageReference)" />

  <!-- Validates that the correct properties have been set for design-time compiles  -->
  <Target Name="_CheckCompileDesignTimePrerequisite">

    <Error Condition="'$(SkipCompilerExecution)|$(ProvideCommandLineArgs)' != 'true|true'"
           Text="SkipCompilerExecution and ProvideCommandLineArgs should be set before calling the CompileDesignTime target"
           />

  </Target>

  <!-- This target collects all Analyzers in the project. -->
  <Target Name="CollectAnalyzersDesignTime" DependsOnTargets="CompileDesignTime" Returns="@(Analyzer)" />

  <!-- This target collects all the resolved references that are used to actually compile. -->
  <Target Name="CollectResolvedCompilationReferencesDesignTime" DependsOnTargets="CompileDesignTime" Returns="@(ReferencePathWithRefAssemblies)" />

  <!-- This target collects all the extra inputs for the up to date check. -->
  <Target Name="CollectUpToDateCheckInputDesignTime" DependsOnTargets="CompileDesignTime" Returns="@(UpToDateCheckInput)">
    <ItemGroup>
      <!-- MSBuild additional compile file, such as the file input cache file -->
      <UpToDateCheckInput Include="@(CustomAdditionalCompileInputs)"/>
    </ItemGroup>
  </Target>

  <!-- This target collects all the extra inputs for the up to date check. -->
  <Target Name="CollectUpToDateCheckOutputDesignTime" DependsOnTargets="CompileDesignTime" Returns="@(UpToDateCheckOutput)" />

  <!-- This target collects all the things built by the project for the up to date check. -->
  <!-- See CopyFileToOutputDirectory target -->
  <Target Name="CollectUpToDateCheckBuiltDesignTime" DependsOnTargets="CompileDesignTime" Returns="@(UpToDateCheckBuilt)">
    <ItemGroup>
      <!-- Assembly output, bin and obj -->
      <UpToDateCheckBuilt Condition="'$(CopyBuildOutputToOutputDirectory)' != 'false' and '$(SkipCopyBuildProduct)' != 'true'" Include="$(TargetPath)"/>
      <UpToDateCheckBuilt Include="@(IntermediateAssembly)"/>

      <!-- Documentation file, bin and obj -->
      <UpToDateCheckBuilt Condition="'$(_DocumentationFileProduced)'=='true'" Include="@(FinalDocFile)"/>
      <UpToDateCheckBuilt Condition="'$(_DocumentationFileProduced)'=='true'" Include="@(DocFileItem)"/>

      <!-- Symbols, bin and obj -->
      <UpToDateCheckBuilt Condition="'$(_DebugSymbolsProduced)'=='true'" Include="@(_DebugSymbolsIntermediatePath)"/>
      <UpToDateCheckBuilt Condition="'$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)' != 'false'" Include="@(_DebugSymbolsOutputPath)"/>

      <!-- app.config -->
      <UpToDateCheckBuilt Condition=" '@(AppConfigWithTargetPath)' != '' " Include="@(AppConfigWithTargetPath->'$(OutDir)%(TargetPath)')" Original="@(AppConfigWithTargetPath)"/>
    </ItemGroup>
  </Target>

</Project>